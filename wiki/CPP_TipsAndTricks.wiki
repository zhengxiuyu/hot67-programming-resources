#summary Tips and Tricks

This page details a few tips and tricks you can employ to accomplish varying tasks and would not normally be explained in this tutorial. Some of them require a certain level of understanding. That level will be written under each heading.

Note that the levels listed here are the *absolute minimum* levels of knowledge you will need to implement them. It may be easier for you to learn them at a later time.

<wiki:toc max_depth="1">

=printf=
*Required Level: Lesson 1*

The `printf` function is another method of output from C (the language C++ is based on).  It allows you to print variable values right in a text string.  

This will be useful later when you start programming the robot.

When you use it, you need to include the library `cstdio`.

{{{
#include <iostream>
#include <cstdio>

using namespace std;

int main()
{
    int x;
    x=5;
    printf("I have %d puppies!\n",x);
    
    return 0;
}
}}}

The code above prints "I have 5 puppies!"

Here is a shortened table of format specifiers (the `%d` above is an example) that `printf()` accepts:

_This table is from the www.cplusplus.com reference page on `printf()`_

|| *Specifier* || *Type* || *Example* ||
|| `d` or `i` || Signed integer || `-49` ||
|| `u` || Unsigned integer || `435` ||
|| `f` || Floating point number || `58.9784` ||
|| `c` || Character || `g` ||
|| `s` || C String || `hello` ||

See [http://www.cplusplus.com/reference/cstdio/printf/ here] for a complete table and more details on `printf`. 

Please note that printf will not accept C++ strings (variable type `string`) If you need to output a `string` in this manner, use this method for now:

|| *Code* || *Output* ||
|| `string mystring;` <br /> `mystring = "hello";` <br /> `printf("I would like to say %s", mystring.c_str());` || `I would like to say hello` ||

Another way to do this would be to declare a [CPP_Lesson6#C_Strings C string]; however, you need to have learned the concepts in lesson 6 in order to do that.

=getchar=
*Required Level: Lesson 1*

The function `getchar()` returns a character from standard input (`stdin`). This function does *not* require the use of the enter key.

Note that, when you use this function, the character the user inputs will *not* show on the screen. To make that happen, simply print the character to the screen.

`getchar()` is a part of cstdio, just like `printf()`.

{{{
int std::getchar()
}}}
_This function returns an `int` to deal with errors. You can still put the value in a char using the `=` operator ([CPP_TipsAndTricks#getchar_use See below])_

==getchar use==
Simply set your `char` variable equal to `getchar`.

*Code*
{{{
#include <iostream>
#include <cstdio>
using namespace std;

int main()
{
  char c;
  
  c = getchar();
  
  printf("%c",c);
  
  cout<<"You entered "<<c<<endl;
  
  return 0;
}
}}}

[http://www.cplusplus.com/getchar More information on getchar]

|| *Input* || *Output* ||
|| `g` || `g` <br /> `You entered g` ||

=Random Numbers=
*Required Level: Lesson 1*

First off, the numbers you will obtain through this method are not quite random, as they are created through a predictable algorithm. However, for most purposes, this process is acceptable.

In order to use it, you must include the following libraries:

{{{
cstdlib
ctime
}}}

==The Random Number Generator==

===Seeding===
Such numbers are created through a random number generator. This generator must be seeded before it can generate any random numbers. The random number generator needs to be seeded ONCE and only ONCE. Seeding multiple times will render the random number generator useless.

Seed it like this:

{{{
srand(time(NULL));
}}}

This provides a random number seed that changes every time the program is run, because the seed is the time the `srand()` function is called.

_*NOTE*: If you are here from Lesson 9, *DO NOT SEED IN THE CLASS CONSTRUCTOR.* Doing so will not generate random numbers. Instead, seed at the beginning of your `main` routine in main.cpp._

===rand===

Then, you can generate random `int`s like this:

{{{
int my_int = rand();
}}}

Note that the `rand()` function takes no parameters. No matter what, the `rand()` function alone will generate a number from 0 to a value known as RAND_MAX, which can vary, but is at least 32767 (the largest number an int is accepted to handle -- though it can handle more, but memory comes into play there).

Regardless, to bring it into a range, use the modulo operator, like so:

{{{
int my_int = rand() % 20;
}}}

This will generate a number from 0 to 19. If you want to generate numbers in a specific range, use the following formula:

{{{
rand() % ((max-min)+1) + min;
}}}

_Remember that addition and subtraction ignore the index number (the number you start from). This is why you need to add 1 after the range calculation._
_Also, *DO NOT TAKE THE RESULT OF THE ABOVE EQUATION AND WRITE `rand() % result`, AS THIS CHANGES THE RANGE OF NUMBERS TO BE GENERATED!* (Order of Operations - modulo is grouped with multiplication/division)_

For example:

{{{
int my_int = rand() % 31 + 1983;
}}}

will generate years from 1983 to 2013.

=I/O Manipulation=
*Required Level: Lesson 1*

If you are a stickler about presentation, there is a whole library for that.

{{{
#include <iomanip>
}}}

Note that the functions below only work on `cout`. For a full list of functions provided by this library, see [http://www.cplusplus.com/reference/iomanip/ iomanip]. Some listed there will also work on `cin`.

Examples provided here are code fragments, meaning that they will not work on their own.

==Output operation==
An *output operation* is one of the clauses you put between the `<<` operators in `cout` statements.

*Example*
{{{
cout<<OutputOperation1<<OutputOperation2<<OutputOperation3;
}}}

Note that the following functions are not considered output operations.

When considering how to set it up, the following functions do affect following `cout` statements, if applicable.

==setw==
The `setw()` function allows you to *set the width* of a specific output operation.

{{{
iomanip::setw(int width)
}}}

===setw parameters===
  * `width`: The number of characters that the following output operation should contain. If there is an excess, the [CPP_TipsAndTricks#setfill fill character] is repeated and put before the characters output by the following operation.
  
===setw use===
Place this function *before* the desired output operation.

*Code*
{{{
cout<<"Not affected"<<setw(30);
cout<<"Affected"<<" Not affected"<<endl;
}}}

_or_

{{{
cout<<"Not affected"<<setw(30)<<"Affected"<<" Not affected"<<endl;
}}}

*Output*
{{{
Not affected                      Affected Not affected
}}}

==setfill==
The `setfill()` function allows you to set the fill character (normally a whitespace). The fill character is used if an output operation contains fewer characters than the [CPP_TipsAndTricks#setw field width].

`setfill()` affects *all* output operations following it.

{{{
iomanip::setfill(char_type c)
}}}

===setfill parameters===

  * `c`: Character to use as the fill character in the following output operation.
  
===setfill use===
Place this function *before* the desired output operation.

|| *Code* || *Output* ||
|| `cout<<setfill('+')<<setw(10)<<"hi"<<endl;` || `++++++++hi` ||

==Text alignment==

These functions are actually a part of `iostream`, so `iomanip` is not required to use them.

They change the alignment of output operations depending on the [CPP_TipsAndTricks#setw field width], not necessarily the screen size.

It is also important to note that these functions affect *all* output operations following their use, meaning if you want it to change back, you have to use the proper function.

Text is normally aligned to the right.

===left===
Sets the output stream to put fill characters after successive output operations (causing a left alignment).

====left parameters====
The parameter for `left` is the following output operation, therefore, parentheses are unneccessary.

====left use====
Use `left` before the output operations to be left-aligned.

|| *Code* || *Output* ||
|| `cout<<setfill('+')<<setw(10)<<left<<"hi"<<endl;` || `hi++++++++` ||

===right===
Sets the output stream to put fill characters before successive output operations (causing a right alignment).

====right parameters====
The parameter for `right` is the following output operation, therefore, parentheses are unneccessary.
 
====right use====
Use `right` before the output operations to be left-aligned.

|| *Code* || *Output* ||
|| `cout<<setfill('+')<<setw(10)<<right<<"hi"<<endl;` || `++++++++hi` ||

===internal===
Sets the output stream to put fill characters in the middle of successive output operations (splitting the readout in two).

====internal parameters====
The parameter for `internal` is the following output operation, therefore, parentheses are unneccessary.
 
====internal use====
Use `internal` before the output operations to be left-aligned.

|| *Code* || *Output* ||
|| `cout<<setfill('+')<<setw(10)<<internal<<"hi"<<endl;` || `h++++++++i` ||

=Input Validation=
*Required Level: Lesson 3*

When the user inputs data into your program, he/she may not know what data type you are looking for. If that is a concern, you can use the following method to keep your program running properly, should that happen.

{{{
#include <iostream>
#include <limits>
//you need this library!!

using namespace std;

int main () {

  unsigned myUInt;
  //note that this is the same as unsigned int myUInt;

  while (!cin>>myUInt)
  {
    cout<<"Please input a positive integer."<<endl;
    cin.clear();
    cin.ignore(numeric_limits<streamsize>.max(),'\n');
  }

  cout<<"You input a positive "<<myUInt<<"."<<endl;

  return 0;
}

}}}

The above code would run like this:

|| *Input* || *Output* ||
|| `2` || `You input a positive 2.` ||
|| `abc` || `Please input a positive integer.` ||
|| `-9` || `Please input a positive integer.` ||
|| `0.25` || `Please input a positive integer.` ||


_Note that you may need to double the `cin.ignore()` statement_

==Why it works==

Despite the fact that the `cin` statement is inside the parentheses for the `while` loop, the program still looks for input at that point. If the user inputs the wrong data type, `cin` throws a couple of flags (`fail` and/or `bad`, to be exact). The computer interprets this to be a `false` value, so it runs the loop.


_This resource was compiled with reference to [http://www.cplusplus.com]_